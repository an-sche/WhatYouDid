@page "/workout/{RoutineId:int}"

@using WhatYouDid.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IRoutineService RoutineService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Authentication

@if (WorkoutDto is null) {
	if (Loaded)
	{
		<RadzenText TextStyle="TextStyle.H4">Invalid Permissions</RadzenText>
	}
	else 
	{
		<RadzenText TextStyle="TextStyle.H4">Loading...</RadzenText>
	}
}
else {
	<RadzenText TextStyle="TextStyle.H4">@WorkoutDto?.RoutineName</RadzenText>
	<hr />
	@if (WorkoutExerciseIndex < @WorkoutDto?.WorkoutExercises?.Count)
	{
		<RadzenText TextStyle="TextStyle.H5">@WorkoutDto?.WorkoutExercises?[WorkoutExerciseIndex].ExerciseName</RadzenText>
		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
			<RadzenButton Click=@(args => OnClick("Back")) Text="Back" ButtonStyle="ButtonStyle.Secondary" />
			<RadzenButton Click=@(args => OnClick("Next")) Text="Next" ButtonStyle="ButtonStyle.Primary" />
		</RadzenStack>
	}
	else {
			<RadzenButton Click=@(args => OnClick("Back")) Text="Back" ButtonStyle="ButtonStyle.Secondary" />
	}	
}


@code {

	[Parameter]
	public int RoutineId { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	public int WorkoutExerciseIndex = 0;
	public WorkoutDto? WorkoutDto { get; set; }
	public bool Loaded = false;


	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is null)
			return;

		// Get the user:
		var authState = await Authentication.GetAuthenticationStateAsync();
		var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
		var user = await UserManager.FindByIdAsync(userId);

		WorkoutDto = await RoutineService.GetWorkoutRoutineDtoAsync(userId, RoutineId);
		Loaded = true;
		//Routine = await RoutineService.GetRoutineAsync(RoutineId);
	}

	private void OnClick(string text) {

		if (WorkoutDto is null)
			return;

		if (text == "Back") {
			if (WorkoutExerciseIndex > 0) 
				WorkoutExerciseIndex--;
		}
		else if (text == "Next") {
			if (WorkoutExerciseIndex < WorkoutDto.WorkoutExercises?.Count)
				WorkoutExerciseIndex++;
		}
		// Refresh the screen??	
	}
}
