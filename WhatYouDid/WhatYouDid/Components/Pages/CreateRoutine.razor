@page "/createroutine"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IWhatYouDidApi Api
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Authentication
@inject UserManager<ApplicationUser> UserManager


<PageTitle>Create Routine</PageTitle>
<RadzenText TextStyle="TextStyle.H4">Create Routine</RadzenText>

<AuthorizeView>
	<div class="col-md-4">
		<hr />
		<EditForm Model=@routine OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit" FormName="EditRoutine" Context="EditRoutine">

			<DataAnnotationsValidator />
			<ValidationSummary />


			<RadzenFormField AllowFloatingLabel="false" Text="Routine Name" Style="width: 100%" >
				<ChildContent>
					<RadzenTextBox Name="RoutineName" @bind-Value=routine.Name />
				</ChildContent>
			</RadzenFormField>
			<ValidationMessage For="() => routine.Name" />
			<hr />

			@foreach (var e in routine.Exercises)
			{
				<RadzenCard Variant="Variant.Outlined">
					<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
						<RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Left" Style="left">Exercise: @e.Sequence</RadzenText>
						<RadzenButton Click=@(x => RemoveExercise(e)) Icon="delete" Variant="Variant.Text"></RadzenButton>
					</RadzenStack>
					<div>
						<RadzenFormField AllowFloatingLabel="false" Text="Exercise Name">
							<ChildContent>
								<RadzenTextBox Name="ExerciseName" @bind-Value=e.Name />
							</ChildContent>
						</RadzenFormField>
						<ValidationMessage For="() => e.Name" />

						<RadzenFormField AllowFloatingLabel="false" Text="Sets">
							<ChildContent>
								<RadzenNumeric Name="Sets" @bind-Value=e.Sets />
							</ChildContent>
						</RadzenFormField>
						<ValidationMessage For="() => e.Sets" />
					</div>
					<div>
						<RadzenCheckBox @bind-Value=e.HasReps />
						<RadzenLabel Text="Reps?" />
						<RadzenCheckBox @bind-Value=e.HasWeight />
						<RadzenLabel Text="Weight?" />
						<RadzenCheckBox @bind-Value=e.HasDuration />
						<RadzenLabel Text="Duration?" />
					</div>
				</RadzenCard>
				<hr />
			}	
			
			<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
				<RadzenButton Click="@AddExercise" Text="Add Exercise" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
				<RadzenButton ButtonType="ButtonType.Submit" Text="Create Routine" Icon="save" ButtonStyle="ButtonStyle.Secondary" />
			</RadzenStack>

		</EditForm>
	</div>
</AuthorizeView>



@code {

	private bool Busy = false;

	[Parameter]
	public int? Id { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	Routine routine = new() {
		Name = string.Empty,
		Exercises = new List<Exercise>()
		{
			new Exercise()
			{
				Sequence = 1,
				Name = string.Empty,
				Sets = 1,

				HasReps = true,
				HasWeight = true
			}
		},
	};

	async Task OnInvalidSubmit()
	{
		await Task.Delay(1);
	}

	async Task OnValidSubmit()
	{
		if (Busy) return;
		Busy = true;

		// Submit the changes / additions

		// Assume the form was valid:
		try
		{
			if (authenticationState is null)
				return;

			var authState = await authenticationState;
			var userId = authState?.User.FindFirstValue(ClaimTypes.NameIdentifier);
			var user = await UserManager.FindByIdAsync(userId);
			routine.CreateUser = user;
		}
		catch 
		{
			return;	
		}
		finally
		{
			Busy = false;
		}


		var createdRoutine = await Api.AddRoutineAsync(routine);

		// Navigate to the "View Routine" Page:
		if (createdRoutine is null)
		{
			// Error Creating Routine??
			Busy = false;
			return;
		}

		Navigation.NavigateTo("routines");
	}

	void AddExercise()
	{
		routine.Exercises.Add(
			new Exercise()
			{
				Sequence = routine.Exercises.Count + 1,
				Name = string.Empty,
				Sets = 1,

				HasReps = true,
				HasWeight = true
			}
		);
	}

	void RemoveExercise(Exercise e)
	{
		if (routine.Exercises.Remove(e))
		{
			for (int i = 0; i < routine.Exercises.Count; i++)
			{
				routine.Exercises[i].Sequence = i + 1;
			}
		}
	}
}
