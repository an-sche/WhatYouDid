@page "/edit-routine"
@page "/edit-routine/{id:int}"
@rendermode RenderMode.InteractiveServer

<PageTitle>Edit Routine</PageTitle>
<h3>Edit Routine</h3>

<EditForm Model=@routine OnSubmit=@HandleSubmit FormName="editroutine">
	<p>
		<label>Name: </label>
		<InputText @bind-Value="routine.Name">@routine.Name</InputText>
		<hr />
	</p>
	@foreach (var e in routine.Exercises)
	{
		<div>
			<h5>Exercise: @e.Sequence</h5>
		</div>
		<div>
			<label>Name: </label>
			<InputText @bind-Value=e.Name>@e.Name</InputText>
			<label>Sets: </label>
			<InputNumber @bind-Value=e.Sets>@e.Sets</InputNumber>
			<button @onclick="() => RemoveExercise(e)" class="btn-close"></button>
		</div>
		<div>
			<InputCheckbox @bind-Value=e.HasReps>@e.HasReps</InputCheckbox>
			<label>Reps? | </label>
			<InputCheckbox @bind-Value=e.HasWeight>@e.HasWeight</InputCheckbox>
			<label>Weight? | </label>
			<InputCheckbox @bind-Value=e.HasDuration>@e.HasDuration</InputCheckbox>
			<label>Duration?</label>
		</div>
		<hr />
	}

	<button @onclick=AddExercise class="btn btn-primary">+</button>

</EditForm>



@code {

	[Parameter]
	public int? Id { get; set; }

	Routine routine = new() {
		Name = string.Empty,
		Exercises = new List<Exercise>()
		{
			new Exercise()
			{
				Sequence = 1,
				Name = string.Empty,
				Sets = 1,

				HasReps = true,
				HasWeight = true
			}
		},
	};

	async Task HandleSubmit()
	{
		// Submit the changes / additions
	}

	void AddExercise()
	{
		routine.Exercises.Add(
			new Exercise()
			{
				Sequence = routine.Exercises.Count + 1,
				Name = string.Empty,
				Sets = 1,

				HasReps = true,
				HasWeight = true
			}
		);
		StateHasChanged();
	}

	void RemoveExercise(Exercise e)
	{
		if (routine.Exercises.Remove(e))
		{
			for (int i = 0; i < routine.Exercises.Count; i++)
			{
				routine.Exercises[i].Sequence = i + 1;
			}
		}
	}
}
