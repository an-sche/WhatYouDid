@page "/workouts"
@using WhatYouDid.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IRoutineService RoutineService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<PageTitle>Workouts</PageTitle>
<RadzenText TextStyle="TextStyle.H4">Workouts</RadzenText>

@if (workoutsQueryable is null)
{
	<span>Loading...</span>
}
else
{
    <RadzenDataGrid Data="@workoutsQueryable" TItem="Workout" AllowPaging="true" PageSize="5">
		<Columns>
			<RadzenDataGridColumn TItem="Workout" Property="StartTime" Title="Date" Frozen="true" />
			<RadzenDataGridColumn TItem="Workout" Property="RoutineName" Title="Name" />
			<RadzenDataGridColumn TItem="Workout" Title="View">
				<Template Context="workout" >
					<RadzenButton Click="@(() => ViewWorkout(workout))">View</RadzenButton>
				</Template>
			</RadzenDataGridColumn>
		</Columns>
	</RadzenDataGrid>
}

@if (selectedWorkout is not null)
{
	<RadzenText TextStyle="TextStyle.H5">@selectedWorkout.RoutineName</RadzenText>
	<RadzenDataGrid Data="@selectedWorkout.WorkoutExercises" TItem="WorkoutExerciseDto">
		<Columns>
			<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="Sequence" Title="Sequence" />
			<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="ExerciseName" Title="Exercise" />
			<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="Review" Title="Review" />
		</Columns>
	</RadzenDataGrid>
}

@code {

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	private string UserId = string.Empty;
	WorkoutDto? selectedWorkout;
	IQueryable<Workout>? workoutsQueryable;

	async Task ViewWorkout(Workout workout)
	{
		selectedWorkout = await RoutineService.GetCompletedWorkoutDtoAsync(UserId, workout.WorkoutId);	
	}

	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is null)
			return;

		var authState = await authenticationState;
		UserId = authState?.User.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
		var user = await UserManager.FindByIdAsync(UserId);

		workoutsQueryable = RoutineService.GetUserWorkoutsQueryable(user);
	}
}
