@page "/workout/{RoutineId:int}"

@using WhatYouDid.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@using WhatYouDid.Components.Shared
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IWhatYouDidApi Api
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

@if (WorkoutDto is null) {
	if (Loaded)
	{
		<RadzenText TextStyle="TextStyle.H4">Invalid Permissions</RadzenText>
	}
	else 
	{
		<RadzenText TextStyle="TextStyle.H4">Loading...</RadzenText>
	}
}
else {
	<RadzenText TextStyle="TextStyle.H4">@WorkoutDto?.RoutineName</RadzenText>
	if (WorkoutExerciseIndex < @WorkoutDto?.WorkoutExercises?.Count) {
		string unit = " of " + @WorkoutDto?.WorkoutExercises?.Count;
		<RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Light" Value="@(WorkoutExerciseIndex + 1)" Max="@(WorkoutDto?.WorkoutExercises?.Count ?? 0)" Unit="@unit"></RadzenProgressBar>
	}
	@if (WorkoutExerciseIndex < @WorkoutDto?.WorkoutExercises?.Count)
	{
		<RadzenText TextStyle="TextStyle.H5">@WorkoutDto?.WorkoutExercises?[WorkoutExerciseIndex].ExerciseName</RadzenText>

		// This is where i put the information for them to fill out!
		var workoutExercise = WorkoutDto.WorkoutExercises[WorkoutExerciseIndex];
		<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Normal">
		@for (int i = 0; i < workoutExercise.Sets; i++)
		{
			var index = i; // capture the loop variable
			<RadzenCard Variant="Variant.Outlined">
				<RadzenText TextStyle="TextStyle.Caption">Set: @(index + 1)</RadzenText>

				@if (workoutExercise.HasReps)
				{
					int? repGoal = null;
					if (@workoutExercise.LastReps != null && workoutExercise.LastReps.Length > index)
					{
						repGoal = @workoutExercise.LastReps[index];
					}
					<WorkoutFormField FormFieldType="WorkoutFormField.WorkoutFormFieldType.Reps"
									  @bind-EnterValue="@workoutExercise.Reps[index]" 
									  Goal="@repGoal" />
				}

				@if (workoutExercise.HasWeights)
				{
					int? weightGoal = null;
					if (@workoutExercise.LastWeights != null && workoutExercise.LastWeights.Length > index)
					{
						weightGoal = @workoutExercise.LastWeights[index];
					}
					<WorkoutFormField FormFieldType="WorkoutFormField.WorkoutFormFieldType.Weight"
									  @bind-EnterValue="@workoutExercise.Weights[index]"
									  Goal="@weightGoal" />
				}

				@if (workoutExercise.HasDurations)
				{
					int? durationGoal = null;
					@if (@workoutExercise.LastDurations != null && workoutExercise.LastDurations.Length > index)
					{
						durationGoal = @workoutExercise.LastDurations[index];
					}

					<WorkoutFormField FormFieldType="WorkoutFormField.WorkoutFormFieldType.Duration"
									  @bind-EnterValue="@workoutExercise.Durations[index]"
									  Goal="@durationGoal" />
				}
			</RadzenCard>
		}
		</RadzenStack>

		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
			<RadzenButton Click=@OnBackClick Text="Back" ButtonStyle="ButtonStyle.Secondary" Disabled="WorkoutExerciseIndex == 0" />
			<RadzenButton Click=@OnNextClick Text="Next" ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit"/>
		</RadzenStack>
	}
	else {

		<RadzenText TextStyle="TextStyle.H5">Review</RadzenText>
		<RadzenDataGrid Data="@WorkoutDto?.WorkoutExercises" TItem="WorkoutExerciseDto"> 
			<Columns>
				<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="Sequence" Title="#" Width="50px"/> 
				<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="ExerciseName" Title="Exercise" />
				<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="Review" Title="Review" />
			</Columns>
		</RadzenDataGrid>

		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
			<RadzenButton Click=@OnBackClick Text="Back" ButtonStyle="ButtonStyle.Secondary" />
			<RadzenButton Click=@OnSubmitClick Text="Submit" ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit"/>
		</RadzenStack>
	}	
}


@code {

	[Parameter]
	public int RoutineId { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	public int WorkoutExerciseIndex = 0;
	public WorkoutDto? WorkoutDto { get; set; }
	public bool Loaded = false;
	public bool Saving = false;

	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is null)
			return;

		// Get the user:
		var authState = await authenticationState;
		var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
		var user = await UserManager.FindByIdAsync(userId);

		WorkoutDto = await Api.GetStartWorkoutDtoAsync(userId, RoutineId);
		Loaded = true;
		//Routine = await RoutineService.GetRoutineAsync(RoutineId);
	}

	private void OnBackClick() {
		if (WorkoutDto is null) return;

		if (WorkoutExerciseIndex > 0)
			WorkoutExerciseIndex--;
	}

	private void OnNextClick() {
		if (WorkoutDto is null) return;

		if (WorkoutExerciseIndex < WorkoutDto.WorkoutExercises?.Count)
			WorkoutExerciseIndex++;
	}

	private async Task OnSubmitClick() {
		// TODO:
		// Save the workout they created to the database
		if (WorkoutDto is null) return;	
		if (Saving) return;
		Saving = true;

		var saveResult = await Api.SaveWorkoutAsync(WorkoutDto);

		// Send the user to the Workouts page...
		if (saveResult)
			Navigation.NavigateTo("/workouts");

		Saving = false;
	}
}
