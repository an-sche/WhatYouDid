@page "/workout/{RoutineId:int}"

@using WhatYouDid.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IRoutineService RoutineService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

@if (WorkoutDto is null) {
	if (Loaded)
	{
		<RadzenText TextStyle="TextStyle.H4">Invalid Permissions</RadzenText>
	}
	else 
	{
		<RadzenText TextStyle="TextStyle.H4">Loading...</RadzenText>
	}
}
else {
	<RadzenText TextStyle="TextStyle.H4">@WorkoutDto?.RoutineName</RadzenText>
	<hr />
	@if (WorkoutExerciseIndex < @WorkoutDto?.WorkoutExercises?.Count)
	{
		<RadzenText TextStyle="TextStyle.H5">@WorkoutDto?.WorkoutExercises?[WorkoutExerciseIndex].ExerciseName</RadzenText>

		// This is where i put the information for them to fill out!
		var workoutExercise = WorkoutDto.WorkoutExercises[WorkoutExerciseIndex];
		<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Normal">
			@for (int i = 0; i < workoutExercise.Sets; i++)
			{
				var index = i; // capture the loop variable
				<RadzenCard Variant="Variant.Outlined">
					<RadzenText TextStyle="TextStyle.Caption">Set: @(index + 1)</RadzenText>
					@if (workoutExercise.HasReps)
					{
						<RadzenFormField AllowFloatingLabel="false" Text="Reps" Style="width: 100%">
							<ChildContent>
								<RadzenNumeric Name="Reps" @bind-Value=workoutExercise.Reps[index]></RadzenNumeric>
							</ChildContent>
						</RadzenFormField>
					}

					@if (workoutExercise.HasWeights)
					{
						<RadzenFormField AllowFloatingLabel="false" Text="Weight" Style="width: 100%">
							<ChildContent>
								<RadzenNumeric Name="Weight" @bind-Value=workoutExercise.Weights[index]></RadzenNumeric>
							</ChildContent>
						</RadzenFormField>
					}
					@if (workoutExercise.HasDurations)
					{
						<RadzenFormField AllowFloatingLabel="false" Text="Duration" Style="width: 100%">
							<ChildContent>
								<RadzenNumeric Name="Duration" @bind-Value=workoutExercise.Durations[index]></RadzenNumeric>
							</ChildContent>
						</RadzenFormField>
					}
				</RadzenCard>
			}
		</RadzenStack>

		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
			<RadzenButton Click=@OnBackClick Text="Back" ButtonStyle="ButtonStyle.Secondary" />
			<RadzenButton Click=@OnNextClick Text="Next" ButtonStyle="ButtonStyle.Primary" />
		</RadzenStack>
	}
	else {

		<RadzenText TextStyle="TextStyle.H5">Review</RadzenText>
		<RadzenDataGrid Data="@WorkoutDto?.WorkoutExercises" TItem="WorkoutExerciseDto"> 
			<Columns>
				<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="Sequence" Title="Sequence" /> 
				<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="ExerciseName" Title="Exercise" />
				<RadzenDataGridColumn TItem="WorkoutExerciseDto" Property="Review" Title="Review" />
			</Columns>
		</RadzenDataGrid>

		<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" >
			<RadzenButton Click=@OnBackClick Text="Back" ButtonStyle="ButtonStyle.Secondary" />
			<RadzenButton Click=@OnSubmitClick Text="Submit" ButtonStyle="ButtonStyle.Primary" />
		</RadzenStack>
	}	
}


@code {

	[Parameter]
	public int RoutineId { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }
	public int WorkoutExerciseIndex = 0;
	public WorkoutDto? WorkoutDto { get; set; }
	public bool Loaded = false;
	public bool Saving = false;

	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is null)
			return;

		// Get the user:
		var authState = await authenticationState;
		var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
		var user = await UserManager.FindByIdAsync(userId);

		WorkoutDto = await RoutineService.GetStartWorkoutDtoAsync(userId, RoutineId);
		Loaded = true;
		//Routine = await RoutineService.GetRoutineAsync(RoutineId);
	}

	private void OnBackClick() {
		if (WorkoutDto is null) return;

		if (WorkoutExerciseIndex > 0)
			WorkoutExerciseIndex--;
	}

	private void OnNextClick() {
		if (WorkoutDto is null) return;

		if (WorkoutExerciseIndex < WorkoutDto.WorkoutExercises?.Count)
			WorkoutExerciseIndex++;
	}

	private async Task OnSubmitClick() {
		// TODO:
		// Save the workout they created to the database
		if (WorkoutDto is null) return;	
		if (Saving) return;
		Saving = true;

		var saveResult = await RoutineService.SaveWorkoutAsync(WorkoutDto);

		// Send the user to the Workouts page...
		if (saveResult)
			Navigation.NavigateTo("/workouts");

		Saving = false;
	}
}
