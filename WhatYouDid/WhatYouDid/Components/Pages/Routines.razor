@page "/routines"
@using WhatYouDid.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IRoutineService RoutineService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Authentication

<PageTitle>Routines</PageTitle>
<RadzenText TextStyle="TextStyle.H3">Routines</RadzenText>

@if (routinesQueryable is null)
{
	<span>Loading...</span>
}
else
{
	<RadzenDataGrid Data="@routinesQueryable" TItem="Routine">
		<Columns>
			<RadzenDataGridColumn TItem="Routine" Property="Name" Title="Name" Frozen="true" />
			<RadzenDataGridColumn TItem="Routine" Title="View">
				<Template Context="routine" >
					<RadzenButton Click="@(() => OpenExercises(routine))">View</RadzenButton>
				</Template>
			</RadzenDataGridColumn>
		</Columns>
	</RadzenDataGrid>
}

@if (exercises is not null)
{
	<RadzenText TextStyle="TextStyle.H4">@routine</RadzenText>

	<RadzenDataGrid Data="exercises" TItem="Exercise">
		<Columns>
			<RadzenDataGridColumn TItem="Exercise" Property="Sequence" Title="Sequence" />
			<RadzenDataGridColumn TItem="Exercise" Property="Name" Title="Name" />
			<RadzenDataGridColumn TItem="Exercise" Property="Sets" Title="Sets" />
			<RadzenDataGridColumn TItem="Exercise" Property="HasReps" Title="Reps?" />
			<RadzenDataGridColumn TItem="Exercise" Property="HasWeight" Title="Weight?" />
            <RadzenDataGridColumn TItem="Exercise" Property="HasDuration" Title="Duration?" />
        </Columns>
	</RadzenDataGrid>
}

@code {

	string? routine;
	List<Exercise>? exercises;
	IQueryable<Routine>? routinesQueryable;
	ApplicationUser? user;

	void OpenExercises(Routine routine)
	{
		this.routine = routine.Name;
		exercises = RoutineService.GetExercises(routine.RoutineId).ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		// Get the user:
		var authState = await Authentication.GetAuthenticationStateAsync();
		var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
		user = await UserManager.FindByIdAsync(userId);

		var routines = await RoutineService.GetRoutinesAsync();
		routinesQueryable = routines.AsQueryable();
	}
}
