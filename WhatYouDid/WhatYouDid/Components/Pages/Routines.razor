@page "/routines"
@using WhatYouDid.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IRoutineService RoutineService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<PageTitle>Routines</PageTitle>
<RadzenText TextStyle="TextStyle.H4">Routines</RadzenText>

<RadzenDataGrid IsLoading="@(routines is null)" 
				Data="@routines"
				TItem="Routine" 
				AllowVirtualization="true"
				AllowPaging="true" 
				AllowFiltering="true" 
				FilterMode="FilterMode.Simple" 
				PageSize="5" 
				Density="Density.Compact">
	<Columns>
		<RadzenDataGridColumn TItem="Routine" Property="Name" Title="Name" Frozen="true" />
		<RadzenDataGridColumn TItem="Routine" Title="View" Filterable="false">
			<Template Context="routine">
				<RadzenButton Click="@(() => OpenExercises(routine))">View</RadzenButton>
			</Template>
		</RadzenDataGridColumn>
	</Columns>
</RadzenDataGrid>

@if (exercises is not null)
{
	<RadzenText TextStyle="TextStyle.H5">@selectedRoutineName</RadzenText>
	<RadzenButton Click="@(() => StartRoutine())">Start Exercise</RadzenButton>

	<RadzenDataGrid Data="exercises" TItem="Exercise" Density="Density.Compact">
		<Columns>
			<RadzenDataGridColumn TItem="Exercise" Property="Sequence" Title="Sequence" />
			<RadzenDataGridColumn TItem="Exercise" Property="Name" Title="Name" />
			<RadzenDataGridColumn TItem="Exercise" Property="Sets" Title="Sets" />
			<RadzenDataGridColumn TItem="Exercise" Property="HasReps" Title="Reps?"  />
			<RadzenDataGridColumn TItem="Exercise" Property="HasWeight" Title="Weight?" />
            <RadzenDataGridColumn TItem="Exercise" Property="HasDuration" Title="Duration?" />
        </Columns>
	</RadzenDataGrid>
}

@code {

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	string? selectedRoutineName;
	int? selectedRoutineId;
	List<Exercise>? exercises;

	IEnumerable<Routine>? routines;
	ApplicationUser? user;

	void OpenExercises(Routine routine)
	{
		this.exercises = RoutineService.GetExercises(routine.RoutineId).ToList();
		this.selectedRoutineId = routine.RoutineId;
		this.selectedRoutineName = routine.Name;
	}

	void StartRoutine()
	{
		if (selectedRoutineId is null)
			return;

		Navigation.NavigateTo($"workout/{selectedRoutineId}");
	}

	protected override async Task OnInitializedAsync()
	{
		if (authenticationState is null)
			return;

		var authState = await authenticationState;
		var userId = authState?.User.FindFirstValue(ClaimTypes.NameIdentifier);
		user = await UserManager.FindByIdAsync(userId);

		routines = RoutineService.GetUserRoutinesQueryable(user);
	}
}