@page "/routines"
@using WhatYouDid.Routines
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Security.Claims
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IRoutineService RoutineService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Authentication

<PageTitle>Routines</PageTitle>
<h1>Routines</h1>

@if (routinesQueryable is null)
{
	<span>Loading...</span>
}
else
{
	<QuickGrid Items=@routinesQueryable>
		<PropertyColumn Property="@(p => p.Name)" />
	</QuickGrid>
}

@if (exercises is not null)
{
	<h1>Exercises</h1>
	<QuickGrid Items=@exercises.OrderBy(x => x.Sequence).AsQueryable()>
		<PropertyColumn Property="@(p => p.Sequence)" />
		<PropertyColumn Property="@(p => p.Name)" />
		<PropertyColumn Property="@(p => p.HasReps)" />
		<PropertyColumn Property="@(p => p.HasWeight)" />
		<PropertyColumn Property="@(p => p.HasDuration)" />
	</QuickGrid>
}

@code {

	IQueryable<Exercise>? exercises;
	IQueryable<Routine>? routinesQueryable;
	ApplicationUser? user;

	protected override async Task OnInitializedAsync()
	{
		// Get the user:
		var authState = await Authentication.GetAuthenticationStateAsync();
		var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
		user = await UserManager.FindByIdAsync(userId);

		var routines = await RoutineService.GetRoutinesAsync();
		routinesQueryable = routines.AsQueryable();
	}
}
